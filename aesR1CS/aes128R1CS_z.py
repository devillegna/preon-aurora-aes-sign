
import os, sys; sys.path.append(os.path.dirname(os.path.realpath(__file__)))
from aesR1CS.aes128 import aes128_encrypt


_g_tab = [ 0, 0x1, 0x8d, 0xf6, 0xcb, 0x52, 0x7b, 0xd1, 0xe8, 0x4f, 0x29, 0xc0, 0xb0, 0xe1, 0xe5, 0xc7, 0x74, 0xb4, 0xaa, 0x4b, 0x99, 0x2b, 0x60, 0x5f, 0x58, 0x3f, 0xfd, 0xcc, 0xff, 0x40, 0xee, 0xb2, 0x3a, 0x6e, 0x5a, 0xf1, 0x55, 0x4d, 0xa8, 0xc9, 0xc1, 0xa, 0x98, 0x15, 0x30, 0x44, 0xa2, 0xc2, 0x2c, 0x45, 0x92, 0x6c, 0xf3, 0x39, 0x66, 0x42, 0xf2, 0x35, 0x20, 0x6f, 0x77, 0xbb, 0x59, 0x19, 0x1d, 0xfe, 0x37, 0x67, 0x2d, 0x31, 0xf5, 0x69, 0xa7, 0x64, 0xab, 0x13, 0x54, 0x25, 0xe9, 0x9, 0xed, 0x5c, 0x5, 0xca, 0x4c, 0x24, 0x87, 0xbf, 0x18, 0x3e, 0x22, 0xf0, 0x51, 0xec, 0x61, 0x17, 0x16, 0x5e, 0xaf, 0xd3, 0x49, 0xa6, 0x36, 0x43, 0xf4, 0x47, 0x91, 0xdf, 0x33, 0x93, 0x21, 0x3b, 0x79, 0xb7, 0x97, 0x85, 0x10, 0xb5, 0xba, 0x3c, 0xb6, 0x70, 0xd0, 0x6, 0xa1, 0xfa, 0x81, 0x82, 0x83, 0x7e, 0x7f, 0x80, 0x96, 0x73, 0xbe, 0x56, 0x9b, 0x9e, 0x95, 0xd9, 0xf7, 0x2, 0xb9, 0xa4, 0xde, 0x6a, 0x32, 0x6d, 0xd8, 0x8a, 0x84, 0x72, 0x2a, 0x14, 0x9f, 0x88, 0xf9, 0xdc, 0x89, 0x9a, 0xfb, 0x7c, 0x2e, 0xc3, 0x8f, 0xb8, 0x65, 0x48, 0x26, 0xc8, 0x12, 0x4a, 0xce, 0xe7, 0xd2, 0x62, 0xc, 0xe0, 0x1f, 0xef, 0x11, 0x75, 0x78, 0x71, 0xa5, 0x8e, 0x76, 0x3d, 0xbd, 0xbc, 0x86, 0x57, 0xb, 0x28, 0x2f, 0xa3, 0xda, 0xd4, 0xe4, 0xf, 0xa9, 0x27, 0x53, 0x4, 0x1b, 0xfc, 0xac, 0xe6, 0x7a, 0x7, 0xae, 0x63, 0xc5, 0xdb, 0xe2, 0xea, 0x94, 0x8b, 0xc4, 0xd5, 0x9d, 0xf8, 0x90, 0x6b, 0xb1, 0xd, 0xd6, 0xeb, 0xc6, 0xe, 0xcf, 0xad, 0x8, 0x4e, 0xd7, 0xe3, 0x5d, 0x50, 0x1e, 0xb3, 0x5b, 0x23, 0x38, 0x34, 0x68, 0x46, 0x3, 0x8c, 0xdd, 0x9c, 0x7d, 0xa0, 0xcd, 0x1a, 0x41, 0x1c ]

_h_tab = [ 0x80, 0x0, 0x1, 0x1, 0x3, 0x1, 0x1, 0x2, 0x7, 0x2, 0x1, 0x7, 0x7, 0x4, 0x5, 0x4, 0x7, 0xb, 0xb, 0x4, 0xb, 0x2, 0x7, 0x4, 0x7, 0x2, 0x9, 0xb, 0xb, 0x7, 0xb, 0xd, 0x7, 0xd, 0xb, 0x1e, 0xb, 0x8, 0x17, 0x1a, 0x1f, 0x1, 0x17, 0x2, 0x7, 0xb, 0x13, 0x1d, 0x7, 0xc, 0x1b, 0xb, 0x13, 0x4, 0xb, 0xd, 0x17, 0x4, 0x7, 0x8, 0xb, 0x1a, 0xd, 0x2, 0x7, 0x3d, 0xd, 0x18, 0xb, 0xc, 0x3d, 0x1a, 0x2f, 0x1b, 0x2d, 0x4, 0x17, 0x8, 0x3d, 0x2, 0x37, 0x13, 0x1, 0x3d, 0x17, 0xb, 0x29, 0x24, 0x7, 0xd, 0xb, 0x37, 0x13, 0x33, 0x1d, 0x4, 0x7, 0x1d, 0x3d, 0x2c, 0x1b, 0x3d, 0xb, 0x18, 0x27, 0x1a, 0x31, 0x28, 0xb, 0x32, 0xd, 0x8, 0x17, 0x32, 0x3d, 0x3a, 0x7, 0x30, 0x33, 0xb, 0x37, 0x17, 0x27, 0x1, 0x33, 0x29, 0x3d, 0x3d, 0x47, 0x3d, 0x3d, 0x47, 0x4f, 0x3a, 0x5b, 0x29, 0x4f, 0x4d, 0x49, 0x6e, 0x7b, 0x1, 0x5d, 0x53, 0x67, 0x31, 0x1b, 0x32, 0x67, 0x49, 0x4f, 0x3d, 0x17, 0xb, 0x45, 0x4f, 0x73, 0x63, 0x4d, 0x45, 0x67, 0x33, 0x13, 0x7c, 0x53, 0x4f, 0x3d, 0x2f, 0x17, 0x7f, 0xb, 0x2d, 0x7f, 0x6e, 0x73, 0x3d, 0x7, 0x67, 0xd, 0x60, 0xb, 0x30, 0x37, 0x32, 0x4f, 0x5d, 0x33, 0x1a, 0x43, 0x43, 0x5b, 0x24, 0x7, 0x1f, 0x1d, 0x7c, 0x5f, 0x5b, 0x4f, 0x4, 0x7f, 0x1a, 0x3d, 0x3, 0xb, 0x43, 0x7f, 0x49, 0x27, 0x2, 0x73, 0x2c, 0x5b, 0x52, 0x43, 0x45, 0x67, 0x6e, 0x5f, 0x52, 0x63, 0x4f, 0x67, 0x28, 0x67, 0x4, 0x43, 0x54, 0x4f, 0x5, 0x49, 0x6e, 0x7, 0x3d, 0x45, 0x54, 0x33, 0x37, 0xb, 0x60, 0x37, 0x1e, 0x17, 0x13, 0x27, 0x3d, 0x1, 0x7b, 0x4f, 0x73, 0x29, 0x67, 0x43, 0x9, 0x3d, 0xb ]

def _byte_split_bits( u8ele ): return [ (u8ele>>i)&1 for i in range(8) ]

# public part of vec_z
def get_vec_1v( pt , ct , l ):
    z = [0]*l
    z[0] = 1
    for i in range(16): z[1+i] = ct[i]
    for i in range(16): z[1+16+i] = pt[i]
    return z

def get_vec_z( pt , key , witness_index ):
    ct, rd_states , rk , rk_tmp = aes128_encrypt( pt , key )
    z = get_vec_1v( pt , ct , witness_index )
    # witness part of vec_z
    aes_round = 10
    for i in range(aes_round) :
        if 0==i: r_state = bytearray( pt )
        else : r_state = bytearray( rd_states[(i-1)*16:i*16] )
        r_rk = rk[i*16:i*16+16]
        for j in range(16): r_state[j] = r_state[j]^r_rk[j]
        for j in range(16):
            z.extend( _byte_split_bits( _h_tab[r_state[j]] ) )
        for j in range(16):
            z.extend( _byte_split_bits( _g_tab[r_state[j]] ) )

    z.extend( [key[i] for i in range(16)] )
    r_count = 10
    z.extend( [rk_tmp[i] for i in range(r_count*4)] )
    for i in range(r_count):
        rk4 = rk[i*16+12:i*16+16]
        for j in range(4):
            z.extend( _byte_split_bits( _h_tab[rk4[j]] ) )
        for j in range(4):
            z.extend( _byte_split_bits( _g_tab[rk4[j]] ) )
    return z

aes128R1CS_num_constrains = 288*10 + 16 + 76*10


if __name__ == '__main__' :
    pt = bytes( [i*16+i for i in range(16)] )
    sk = bytes( [i for i in range(16)] )
    z = get_vec_z(pt,sk,64)
    print( f"z[{len(z)}] = " )
    print( [ hex(e) for e in z[:64] ] )
    print( [ hex(e) for e in z[64:] ] )
